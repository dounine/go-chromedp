// Code generated by MockGen. DO NOT EDIT.
// Source: go-chromedp/app/service (interfaces: IDumpService)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ini_v1 "gopkg.in/ini.v1"
)

// MockIDumpService is a mock of IDumpService interface.
type MockIDumpService struct {
	ctrl     *gomock.Controller
	recorder *MockIDumpServiceMockRecorder
}

// MockIDumpServiceMockRecorder is the mock recorder for MockIDumpService.
type MockIDumpServiceMockRecorder struct {
	mock *MockIDumpService
}

// NewMockIDumpService creates a new mock instance.
func NewMockIDumpService(ctrl *gomock.Controller) *MockIDumpService {
	mock := &MockIDumpService{ctrl: ctrl}
	mock.recorder = &MockIDumpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDumpService) EXPECT() *MockIDumpServiceMockRecorder {
	return m.recorder
}

// AppExit mocks base method.
func (m *MockIDumpService) AppExit(arg0 *context.Context, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppExit", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AppExit indicates an expected call of AppExit.
func (mr *MockIDumpServiceMockRecorder) AppExit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppExit", reflect.TypeOf((*MockIDumpService)(nil).AppExit), arg0, arg1, arg2)
}

// Config mocks base method.
func (m *MockIDumpService) Config() *ini_v1.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*ini_v1.File)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockIDumpServiceMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockIDumpService)(nil).Config))
}

// DumpApp mocks base method.
func (m *MockIDumpService) DumpApp(arg0 *context.Context, arg1 string, arg2 DumpJson) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DumpApp indicates an expected call of DumpApp.
func (mr *MockIDumpServiceMockRecorder) DumpApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpApp", reflect.TypeOf((*MockIDumpService)(nil).DumpApp), arg0, arg1, arg2)
}

// MergeFileName mocks base method.
func (m *MockIDumpService) MergeFileName(arg0 *context.Context, arg1 DumpJson) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeFileName", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// MergeFileName indicates an expected call of MergeFileName.
func (mr *MockIDumpServiceMockRecorder) MergeFileName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeFileName", reflect.TypeOf((*MockIDumpService)(nil).MergeFileName), arg0, arg1)
}

// Run mocks base method.
func (m *MockIDumpService) Run(arg0 *context.Context, arg1, arg2 string, arg3 <-chan DumpJson) <-chan DumpInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(<-chan DumpInfo)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIDumpServiceMockRecorder) Run(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIDumpService)(nil).Run), arg0, arg1, arg2, arg3)
}

// UploadIpa mocks base method.
func (m *MockIDumpService) UploadIpa(arg0 *context.Context, arg1 string, arg2 DumpJson) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadIpa", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadIpa indicates an expected call of UploadIpa.
func (mr *MockIDumpServiceMockRecorder) UploadIpa(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadIpa", reflect.TypeOf((*MockIDumpService)(nil).UploadIpa), arg0, arg1, arg2)
}
