// Code generated by MockGen. DO NOT EDIT.
// Source: go-chromedp/app/store (interfaces: ICodeUseStore)

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICodeUseStore is a mock of ICodeUseStore interface.
type MockICodeUseStore struct {
	ctrl     *gomock.Controller
	recorder *MockICodeUseStoreMockRecorder
}

// MockICodeUseStoreMockRecorder is the mock recorder for MockICodeUseStore.
type MockICodeUseStoreMockRecorder struct {
	mock *MockICodeUseStore
}

// NewMockICodeUseStore creates a new mock instance.
func NewMockICodeUseStore(ctrl *gomock.Controller) *MockICodeUseStore {
	mock := &MockICodeUseStore{ctrl: ctrl}
	mock.recorder = &MockICodeUseStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICodeUseStore) EXPECT() *MockICodeUseStoreMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockICodeUseStore) All(arg0 *context.Context) ([]CodeUseEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]CodeUseEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockICodeUseStoreMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockICodeUseStore)(nil).All), arg0)
}

// Create mocks base method.
func (m *MockICodeUseStore) Create(arg0 *context.Context, arg1 *CodeUseEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICodeUseStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICodeUseStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockICodeUseStore) Delete(arg0 *context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICodeUseStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICodeUseStore)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockICodeUseStore) Get(arg0 *context.Context, arg1 int) (*CodeUseEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*CodeUseEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICodeUseStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICodeUseStore)(nil).Get), arg0, arg1)
}

// InitSchema mocks base method.
func (m *MockICodeUseStore) InitSchema() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitSchema")
}

// InitSchema indicates an expected call of InitSchema.
func (mr *MockICodeUseStoreMockRecorder) InitSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSchema", reflect.TypeOf((*MockICodeUseStore)(nil).InitSchema))
}

// List mocks base method.
func (m *MockICodeUseStore) List(arg0 *context.Context, arg1, arg2 int) ([]CodeUseEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]CodeUseEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockICodeUseStoreMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockICodeUseStore)(nil).List), arg0, arg1, arg2)
}

// QueryByUdidCodeID mocks base method.
func (m *MockICodeUseStore) QueryByUdidCodeID(arg0 *context.Context, arg1, arg2 string) ([]CodeUseEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByUdidCodeID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]CodeUseEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByUdidCodeID indicates an expected call of QueryByUdidCodeID.
func (mr *MockICodeUseStoreMockRecorder) QueryByUdidCodeID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByUdidCodeID", reflect.TypeOf((*MockICodeUseStore)(nil).QueryByUdidCodeID), arg0, arg1, arg2)
}

// Total mocks base method.
func (m *MockICodeUseStore) Total(arg0 *context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Total indicates an expected call of Total.
func (mr *MockICodeUseStoreMockRecorder) Total(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockICodeUseStore)(nil).Total), arg0)
}

// Update mocks base method.
func (m *MockICodeUseStore) Update(arg0 *context.Context, arg1 *CodeUseEntity, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICodeUseStoreMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICodeUseStore)(nil).Update), arg0, arg1, arg2)
}

// Updates mocks base method.
func (m *MockICodeUseStore) Updates(arg0 *context.Context, arg1 *CodeUseEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockICodeUseStoreMockRecorder) Updates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockICodeUseStore)(nil).Updates), arg0, arg1)
}
